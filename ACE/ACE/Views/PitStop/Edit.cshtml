@model ACE.Models.PitStop

@{
    ViewBag.Title = "Edit";
}

<h2>Edit PitStop</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.PitStopID)

        <div class="form-group">
            @Html.LabelFor(model => model.EventID, "EventID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("EventID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.EventID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PitStopName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PitStopName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PitStopName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PitStopOrder, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PitStopOrder, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PitStopOrder, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PitStopLocation, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PitStopLocation, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StaffID, "StaffID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("StaffID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.StaffID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="alignMap">
            <h4> Set Pit Stop Location here!</h4>
            <div id="map" style="width:500px;height:330px;background:white"></div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-info" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<style>
    .alignMap {
        position: absolute;
        top: 215px;
        left: 580px;
        right: 0px;
        width: 300px;
        padding: 10px;
    }

    #map {
        height: 100%;
    }
</style>


<script>
    function myMap() {
        var latlng = new google.maps.LatLng(1.281766, 103.818346);
        
        var mapOptions = {
            center: latlng,
            zoom: 13,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        }
        var map = new google.maps.Map(document.getElementById("map"), mapOptions);
        var marker;
        var geocoder = new google.maps.Geocoder();
        getLatLong();
        google.maps.event.addListener(map, "click", function (event) {
            placeMarker(event.latLng);
            getAddress(event.latLng);
        });
        
        function getLatLong() {
            var address = document.getElementById("PitStopLocation").value;
            //window.alert(address);
            geocoder.geocode({ "address": address }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    //window.alert(results[0].geometry.location)
                    placeMarker(results[0].geometry.location);
                } else {
                    window.alert("Geocode was not successful for the following reason: " + status);
                }
            });
        }

        function getAddress(location) {
            var geocoder = new google.maps.Geocoder();
            geocoder.geocode({ "latLng": location }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    $("#PitStopLocation").val(results[0].formatted_address);
                }
            });
        }

        function placeMarker(location) {
            if (marker != null) {
                marker.setMap(null);
            }
            marker = new google.maps.Marker({
                position: location,
                title: 'PitStop',
                map: map
            });
            map.panTo(location);
            marker.setMap(location);
        }
    }

</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD9Ys2MzFJI-SyPozsev1gNUJapRLsGqOE&callback=myMap"></script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}